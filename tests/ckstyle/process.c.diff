--- ../src/process.c	2022-10-05 02:54:06.819235414 -0400
+++ ckstyle/process.c.gnu	2022-10-05 02:54:17.399334200 -0400
@@ -1,9 +1,9 @@
+#include "builtins.h"
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
-#include <unistd.h>
 #include <sys/wait.h>
-#include "builtins.h"
+#include <unistd.h>
 
 // The contents of this file are up to you, but they should be related to
 // running separate processes. It is recommended that you have functions
@@ -39,7 +39,8 @@
   return 0;
 }
 
-int runCmd (char *command)
+int
+runCmd (char *command)
 {
   // Creating Pipe
   int fd[2];
@@ -52,28 +53,30 @@
   char *firstArgs = strtok (NULL, "\n");
   char *secondCmd = strtok (cmd2, " ");
   char *secondArgs = strtok (NULL, "\n");
-  
+
   if (cmd2 == NULL && firstArgs == NULL)
-    firstCmd [strlen (firstCmd) - 1] = '\0';
-  //printf("first-%s\nargs1-%s\nsecond-%s\nargs2-%s\n", firstCmd, firstArgs, secondCmd, secondArgs);
+    firstCmd[strlen (firstCmd) - 1] = '\0';
+  // printf("first-%s\nargs1-%s\nsecond-%s\nargs2-%s\n", firstCmd, firstArgs,
+  // secondCmd, secondArgs);
 
   if (cmd2 == NULL) // No Pipe Found (Single Command)
     {
-      pid_t child_pid = fork();
+      pid_t child_pid = fork ();
       if (child_pid < 0) // Bad Fork
         return EXIT_FAILURE;
       // CHILD
       if (child_pid == 0)
         {
           close (fd[0]); // closing read end of pipe
-          dup2 (fd[1], STDOUT_FILENO); // redirecting stdout to write end of pipe
-          char *arg1= strtok (firstArgs, " ");
+          dup2 (fd[1],
+                STDOUT_FILENO); // redirecting stdout to write end of pipe
+          char *arg1 = strtok (firstArgs, " ");
           char *arg2 = strtok (NULL, " ");
           char *arg3 = strtok (NULL, "\\n");
           if (firstArgs == NULL)
-          {
-            execlp (firstCmd, firstCmd, NULL);
-          }
+            {
+              execlp (firstCmd, firstCmd, NULL);
+            }
           else if (arg1 != NULL && arg2 == NULL && arg3 == NULL)
             execlp (firstCmd, firstCmd, arg1, NULL);
           else if (arg1 != NULL && arg2 != NULL && arg3 != NULL)
@@ -92,32 +95,9 @@
           if (buffer[0] != ' ')
             printf ("%s", buffer);
         }
-        return EXIT_SUCCESS;
+      return EXIT_SUCCESS;
     }
 
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
   // // Forking
   // pid_t child_pid = fork();
 
@@ -126,7 +106,7 @@
   // // Child
   // if (child_pid == 0)
   // {
-  //     if (cmd2 != NULL) // 
+  //     if (cmd2 != NULL) //
   //     {
   //       close (fd[0]);
   //       dup2 (fd[1], STDOUT_FILENO);
@@ -173,7 +153,6 @@
   // return EXIT_SUCCESS;
 }
 
-
 // void
 // runCmd (char *command, char *arguments, int fd[2])
 // {
@@ -189,10 +168,9 @@
 //       char *token1 = strtok (writeableArgument, " ");
 //       char *token2 = strtok (NULL, " ");
 //       char *token3 = strtok (NULL, "\\n");
-//       //printf ("token1=[%s] token2=[%s] token3=[%s] command: [%s]\n", token1, token2, token3, command);
-//       close (fd[0]); // close read end of pipe
-//       dup2 (fd[1], STDOUT_FILENO);
-//       if (strlen (writeableArgument) == 0)
+//       //printf ("token1=[%s] token2=[%s] token3=[%s] command: [%s]\n",
+//       token1, token2, token3, command); close (fd[0]); // close read end of
+//       pipe dup2 (fd[1], STDOUT_FILENO); if (strlen (writeableArgument) == 0)
 //         execlp (command, command, NULL);
 //       else if (token2 == NULL || token1 == NULL)
 //         execlp (command, command, writeableArgument, NULL);
@@ -217,13 +195,13 @@
 //     {
 //       // SECOND COMMAND
 //       dup2 (fd[0], STDIN_FILENO);
-//       char *arguments = strdup (commandTwo); 
+//       char *arguments = strdup (commandTwo);
 //       char *token = strtok (commandTwo, " ");
 //       arguments = &arguments[strlen (token) + 1];
 //       printf ("command2: [%s], arguments: [%s]\n", token, arguments);
 //       runCmd(token, arguments, fd);
 //       // FIRST COMMAND
-//       arguments = strdup (commandOne); 
+//       arguments = strdup (commandOne);
 //       token = strtok (commandOne, " ");
 //       arguments = &arguments[strlen (token)];
 //       printf ("command: [%s], arguments: [%s]\n", token, arguments);
