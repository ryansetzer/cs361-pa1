--- ../src/builtins.c	2022-09-29 10:40:24.139940470 -0400
+++ ckstyle/builtins.c.gnu	2022-09-29 10:50:14.409501396 -0400
@@ -1,10 +1,10 @@
+#include "hash.h"
+#include "process.h"
+#include "shell.h"
 #include <stdio.h>
-#include <string.h>
 #include <stdlib.h>
+#include <string.h>
 #include <unistd.h>
-#include "shell.h"
-#include "process.h"
-#include "hash.h"
 
 // Given a message as input, print it to the screen followed by a
 // newline ('\n'). If the message contains the two-byte escape sequence
@@ -21,7 +21,7 @@
   if (message != NULL)
     {
       message[strlen (message) - 1] = '\0';
-    } 
+    }
   char *token = strtok_r (message, "\\n", &message);
   char *token2;
   do
@@ -32,13 +32,14 @@
       if (token2 != NULL)
         {
           token2[strlen (token2) - 1] = '\0';
-          char* value = hash_find (token2);
+          char *value = hash_find (token2);
           if (value != NULL)
-          	printf ("%s", value);
+            printf ("%s", value);
         }
       printf ("\n");
       token = strtok_r (message, "\\n", &message);
-    } while (token != NULL);
+    }
+  while (token != NULL);
   return 0;
 }
 // Given a key-value pair string (e.g., "alpha=beta"), insert the mapping
@@ -46,14 +47,13 @@
 //
 // Returns 0 on success, 1 for an invalid pair string (kvpair is NULL or
 // there is no '=' in the string).
-int
-export (char *kvpair)
+int export(char *kvpair)
 {
   char *token = strtok (kvpair, "=");
   char *key = token;
   token = strtok (NULL, "=");
   char *value = token;
-  value [strlen (value) - 1] = '\0';
+  value[strlen (value) - 1] = '\0';
   // printf ("key: [%s] value: [%s]\n", key, value);
   hash_insert (key, value);
   return 0;
@@ -64,7 +64,7 @@
 pwd (void)
 {
   char dir[1000];
-  if (getcwd(dir, sizeof(dir)) != NULL)
+  if (getcwd (dir, sizeof (dir)) != NULL)
     printf ("%s\n", dir);
   return 0;
 }
@@ -99,19 +99,19 @@
           }
       }
   if (isBuiltIn (cmdline))
-  {
-    printf ("%s: dukesh built-in command\n", cmdline); 
-    return 0;  
-  }
+    {
+      printf ("%s: dukesh built-in command\n", cmdline);
+      return 0;
+    }
   else if (strncmp (cmdline, "./", 2) == 0)
-  {
-    if (isExecutable (&cmdline[3]))
-      printf ("%s: is executable\n", cmdline);
-    printf ("%s\n", cmdline);
-    return 0;
-  }
+    {
+      if (isExecutable (&cmdline[3]))
+        printf ("%s: is executable\n", cmdline);
+      printf ("%s\n", cmdline);
+      return 0;
+    }
   getcwd (PATH, sizeof (PATH));
-  printf("%s/%s\n", PATH, cmdline);
+  printf ("%s/%s\n", PATH, cmdline);
   return 0;
 }
 // Changes the current working directory.
@@ -121,7 +121,7 @@
 {
   if (newDir == NULL)
     return 1;
-  newDir [strlen (newDir) - 1] = '\0';
+  newDir[strlen (newDir) - 1] = '\0';
   if (chdir (newDir) != 0)
     perror ("cd failed");
   strcpy (PATH, newDir);
